// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: message.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MessageService service

func NewMessageServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MessageService service

type MessageService interface {
	//    rpc Create (User) returns (Response) {
	//    }
	//    rpc GetOne (UserId) returns (UserResponse) {
	//    }
	GetMany(ctx context.Context, in *PageNumPageSize, opts ...client.CallOption) (*MessageListResponse, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) GetMany(ctx context.Context, in *PageNumPageSize, opts ...client.CallOption) (*MessageListResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.GetMany", in)
	out := new(MessageListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceHandler interface {
	//    rpc Create (User) returns (Response) {
	//    }
	//    rpc GetOne (UserId) returns (UserResponse) {
	//    }
	GetMany(context.Context, *PageNumPageSize, *MessageListResponse) error
}

func RegisterMessageServiceHandler(s server.Server, hdlr MessageServiceHandler, opts ...server.HandlerOption) error {
	type messageService interface {
		GetMany(ctx context.Context, in *PageNumPageSize, out *MessageListResponse) error
	}
	type MessageService struct {
		messageService
	}
	h := &messageServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MessageService{h}, opts...))
}

type messageServiceHandler struct {
	MessageServiceHandler
}

func (h *messageServiceHandler) GetMany(ctx context.Context, in *PageNumPageSize, out *MessageListResponse) error {
	return h.MessageServiceHandler.GetMany(ctx, in, out)
}

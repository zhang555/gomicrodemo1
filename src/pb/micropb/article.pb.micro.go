// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: article.proto

package micropb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"

	context "context"

	api "github.com/micro/go-micro/v2/api"

	client "github.com/micro/go-micro/v2/client"

	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ArticleService service

func NewArticleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ArticleService service

type ArticleService interface {
	GetOne(ctx context.Context, in *Id, opts ...client.CallOption) (*ArticleResponse, error)
	GetMany(ctx context.Context, in *PageNumPageSize, opts ...client.CallOption) (*ArticleListResponse, error)
	Post(ctx context.Context, in *Article, opts ...client.CallOption) (*IdResponse, error)
	Put(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*Response, error)
}

type articleService struct {
	c    client.Client
	name string
}

func NewArticleService(name string, c client.Client) ArticleService {
	return &articleService{
		c:    c,
		name: name,
	}
}

func (c *articleService) GetOne(ctx context.Context, in *Id, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.GetOne", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) GetMany(ctx context.Context, in *PageNumPageSize, opts ...client.CallOption) (*ArticleListResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.GetMany", in)
	out := new(ArticleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Post(ctx context.Context, in *Article, opts ...client.CallOption) (*IdResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Post", in)
	out := new(IdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Put(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Put", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Delete(ctx context.Context, in *Id, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticleService service

type ArticleServiceHandler interface {
	GetOne(context.Context, *Id, *ArticleResponse) error
	GetMany(context.Context, *PageNumPageSize, *ArticleListResponse) error
	Post(context.Context, *Article, *IdResponse) error
	Put(context.Context, *Article, *Response) error
	Delete(context.Context, *Id, *Response) error
}

func RegisterArticleServiceHandler(s server.Server, hdlr ArticleServiceHandler, opts ...server.HandlerOption) error {
	type articleService interface {
		GetOne(ctx context.Context, in *Id, out *ArticleResponse) error
		GetMany(ctx context.Context, in *PageNumPageSize, out *ArticleListResponse) error
		Post(ctx context.Context, in *Article, out *IdResponse) error
		Put(ctx context.Context, in *Article, out *Response) error
		Delete(ctx context.Context, in *Id, out *Response) error
	}
	type ArticleService struct {
		articleService
	}
	h := &articleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ArticleService{h}, opts...))
}

type articleServiceHandler struct {
	ArticleServiceHandler
}

func (h *articleServiceHandler) GetOne(ctx context.Context, in *Id, out *ArticleResponse) error {
	return h.ArticleServiceHandler.GetOne(ctx, in, out)
}

func (h *articleServiceHandler) GetMany(ctx context.Context, in *PageNumPageSize, out *ArticleListResponse) error {
	return h.ArticleServiceHandler.GetMany(ctx, in, out)
}

func (h *articleServiceHandler) Post(ctx context.Context, in *Article, out *IdResponse) error {
	return h.ArticleServiceHandler.Post(ctx, in, out)
}

func (h *articleServiceHandler) Put(ctx context.Context, in *Article, out *Response) error {
	return h.ArticleServiceHandler.Put(ctx, in, out)
}

func (h *articleServiceHandler) Delete(ctx context.Context, in *Id, out *Response) error {
	return h.ArticleServiceHandler.Delete(ctx, in, out)
}
